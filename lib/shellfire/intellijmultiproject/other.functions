# This file is part of intellij-multiproject. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/intellij-multiproject/master/COPYRIGHT. No part of intellij-multiproject, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of intellij-multiproject. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/intellij-multiproject/master/COPYRIGHT.


core_dependency_requires '*' xmlstarlet
intellijmultiproject_other_findProjectOutputPath()
{
	local miscXmlFilePath="$_intellijmultiproject_ideaFolderPath"/misc.xml
	
	_intellijmultiproject_other_projectOutputPathUrl="$(xmlstarlet sel --template --match "/project[component[@name = 'ProjectRootManager']]/component/output" --value-of '@url' --nl "$miscXmlFilePath")"
	
	_intellijmultiproject_other_projectOutputPath="${_intellijmultiproject_other_projectOutputPathUrl##file://}"
}

core_dependency_requires '*' mkdir rm sed mv
intellijmultiproject_other_process()
{
	local otherFolderName="$1"
	local libraryName="$2"
	local otherFolderPath="$3"

	local masterProjectFolderPath="$_intellijmultiproject_ideaFolderPath"/"$otherFolderName"
	mkdir -m 0755 -p "$masterProjectFolderPath"
	
	local replacementPattern='$PROJECT_DIR$'
	replacementPattern="${replacementPattern}"/"$intellijmultiproject_libraryPath"/"$libraryName"
	
	# Replace $PROJECT_DIR$ with $PROJECT_DIR$/library/libraryName
	# Make the replacement RHS safe: http://backreference.org/2009/12/09/using-shell-variables-in-sed/  (Use 's/[[\.*^$(){}?+|/]/\\&/g' for LHS)
	local safeReplacementPattern="$(printf '%s\n' "$replacementPattern"  | sed 's/[[\.*/]/\\&/g; s/$$/\\&/; s/^^/\\&/')"
	
	local otherXmlFile
	pushd "$otherFolderPath"
		
		set +f
		for otherXmlFile in *.xml
		do
			set -f
			
			if [ "$otherFolderName" = 'artifacts' ]; then
				local basename="${otherXmlFile%%.xml}"
				local destinationFilePath="$masterProjectFolderPath"/"$basename"."$libraryName".xml
				rm -f "$destinationFilePath"
			else
				local destinationFilePath="$masterProjectFolderPath"/"$otherXmlFile"
			fi

			sed "s/\\\$PROJECT_DIR\\\$/$safeReplacementPattern/g" "$otherXmlFile" >"$destinationFilePath"
			
			if [ "$otherFolderName" = 'artifacts' ]; then
				
				mv "$destinationFilePath" "$destinationFilePath".bak
				xmlstarlet ed --update "/component[@name = 'ArtifactManager']/artifact/output-path" --value "$_intellijmultiproject_other_projectOutputPath"/artifacts "$destinationFilePath".bak >"$destinationFilePath"
				rm "$destinationFilePath".bak
				
				mv "$destinationFilePath" "$destinationFilePath".bak
				xmlstarlet ed --update "/component[@name = 'ArtifactManager']/artifact/@name" --value "$basename"_"$libraryName" "$destinationFilePath".bak >"$destinationFilePath"
				rm "$destinationFilePath".bak
			fi
		done
		set -f
	
	popd
	
	# Need to fix up artifacts output directory to match project output directory + artifacts
}